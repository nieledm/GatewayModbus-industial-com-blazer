@page "/config"
@using System.Text.Json
@inject IJSRuntime JS
@inject ConfigService ConfigService
@inject ModbusVariableService variableService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using DL6000WebConfig.Models
@using DL6000WebConfig.Services
@inject ConfigService ConfigService
@inject ModbusVariableService variableService

<style>
    .config-container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .config-title {
        color: #2c3e50;
        margin-bottom: 25px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .config-actions {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .equipment-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 6px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .equipment-table th {
        background-color: #3498db;
        color: white;
        padding: 12px;
        text-align: left;
        font-weight: 500;
    }

    .equipment-table td {
        padding: 12px;
        border-bottom: 1px solid #e0e0e0;
        color: #495057;
    }

    .equipment-table tr:hover {
        background-color: #f1f8fe;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        width: 90%;
        max-width: 600px;
        padding: 20px;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 200px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #495057;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .action-buttons {
        margin-top: 20px;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .btn {
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        border: none;
    }

    .btn-primary {
        background-color: #3498db;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #3498db;
        color: #3498db;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .alert {
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 15px;
    }

    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>

<div class="config-container">
    <h3 class="config-title">
        <span style="display:inline-block;width:24px;text-align:center;">‚öôÔ∏è</span>
        Configura√ß√£o de Equipamentos DL6000
    </h3>

    <div class="config-actions">
        <button class="btn btn-primary" @onclick="() => AbrirModal(null)">
            <span style="display:inline-block;width:20px;text-align:center;">‚ûï</span>
            Adicionar Equipamento
        </button>
        
        <div>
            <button @onclick="ExportJson" class="btn btn-outline me-2">
                <span style="display:inline-block;width:20px;text-align:center;">üì§</span>
                Exportar
            </button>
            <label class="btn btn-outline">
                <span style="display:inline-block;width:20px;text-align:center;">üì•</span>
                Importar
                <input type="file" @onchange="ImportJson" hidden />
            </label>
        </div>
    </div>

    @if (devices.Count > 0)
    {
        <div class="table-responsive">
            <table class="equipment-table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>IP</th>
                        <th>Porta</th>
                        <th>A√ß√µes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (device, index) in devices.Select((d, i) => (d, i)))
                    {
                        <tr>
                            <td>@device.Name</td>
                            <td>@device.Ip</td>
                            <td>@device.Port</td>
                            <td>
                                <button class="btn btn-outline" 
                                        @onclick="() => AbrirModal(index)">
                                    <span style="display:inline-block;width:20px;text-align:center;">‚úèÔ∏è</span>
                                    Editar
                                </button>
                                <button class="btn btn-danger" 
                                        @onclick="() => ExcluirEquipamento(index)">
                                    <span style="display:inline-block;width:20px;text-align:center;">üóëÔ∏è</span>
                                    Excluir
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <span style="display:inline-block;width:20px;text-align:center;">‚ÑπÔ∏è</span>
            Nenhum equipamento cadastrado. Clique em "Adicionar Equipamento" para come√ßar.
        </div>
    }

    <!-- Modal de Edi√ß√£o/Adi√ß√£o -->
    @if (mostrarModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h4>
                    <span style="display:inline-block;width:24px;text-align:center;">
                        @(editandoIndex >= 0 ? "‚úèÔ∏è" : "‚ûï")
                    </span>
                    @(editandoIndex >= 0 ? "Editar Equipamento" : "Adicionar Equipamento")
                </h4>
                
                @if (!string.IsNullOrEmpty(mensagemErro))
                {
                    <div class="alert alert-danger">
                        <span style="display:inline-block;width:20px;text-align:center;">‚ö†Ô∏è</span>
                        @mensagemErro
                    </div>
                }

                <div class="form-row">
                    <div class="form-group">
                        <label>Nome</label>
                        <div class="input-group">
                            <span class="input-group-text">DL6000_</span>
                            <input class="form-control" @bind="form.Name" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>IP</label>
                        <input class="form-control" @bind="form.Ip" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Porta</label>
                        <input class="form-control" @bind="form.Port" />
                    </div>
                    <div class="form-group">
                        <label>Ciclo (ms)</label>
                        <input class="form-control" @bind="form.Cycle" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Timeout Envio</label>
                        <input class="form-control" @bind="form.TimeoutSend" />
                    </div>
                    <div class="form-group">
                        <label>Timeout Recebimento</label>
                        <input class="form-control" @bind="form.TimeoutReceive" />
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="btn btn-secondary" @onclick="FecharModal">
                        Cancelar
                    </button>
                    <button class="btn btn-primary" @onclick="SalvarEquipamento">
                        @(editandoIndex >= 0 ? "Salvar Altera√ß√µes" : "Adicionar Equipamento")
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string? mensagemErro;
    private DeviceConfigModel form = new();
    private List<DeviceConfigModel> devices = new();
    private bool mostrarModal = false;
    private int editandoIndex = -1;

    protected override void OnInitialized()
    {
        devices = ConfigService.GetDevices();
    }

    private void AbrirModal(int? index)
    {
        if (index.HasValue && index.Value >= 0 && index.Value < devices.Count)
        {
            var device = devices[index.Value];
            form = new DeviceConfigModel
            {
                Name = device.Name.Replace("DL6000_", ""),
                Ip = device.Ip,
                Port = device.Port,
                UnitId1 = device.UnitId1,
                UnitId2 = device.UnitId2,
                StartIndexDL1 = device.StartIndexDL1,
                StartIndexDL2 = device.StartIndexDL2,
                Cycle = device.Cycle,
                TimeoutSend = device.TimeoutSend,
                TimeoutReceive = device.TimeoutReceive
            };
            editandoIndex = index.Value;
        }
        else
        {
            form = new DeviceConfigModel();
            editandoIndex = -1;
        }
        mostrarModal = true;
        mensagemErro = null;
    }

    private void FecharModal()
    {
        mostrarModal = false;
        form = new DeviceConfigModel();
        editandoIndex = -1;
        mensagemErro = null;
    }

    private void SalvarEquipamento()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(form.Name) || !int.TryParse(form.Name, out int numberOnly))
            {
                mensagemErro = "O nome deve conter apenas n√∫meros inteiros.";
                return;
            }

            form.Name = $"DL6000_{numberOnly}";

            if (editandoIndex >= 0)
            {
                // L√≥gica de edi√ß√£o existente
                var antigoNome = devices[editandoIndex].Name;
                var novoNome = form.Name;

                if (novoNome != antigoNome && devices.Any(d => d.Name == novoNome))
                {
                    mensagemErro = "J√° existe um equipamento com este nome.";
                    return;
                }

                ConfigService.UpdateDevice(form);
                devices = ConfigService.GetDevices();
            }
            else
            {
                // L√≥gica de adi√ß√£o
                if (devices.Any(d => d.Name == form.Name))
                {
                    mensagemErro = "J√° existe um equipamento com este nome.";
                    return;
                }

                ConfigService.AddDevice(form);
                devices = ConfigService.GetDevices();
            }

            FecharModal();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao salvar: {ex.Message}";
        }
    }

    private void ExcluirEquipamento(int index)
    {
        var device = devices[index];
        ConfigService.DeleteDevice(device.Name);
        variableService.DeleteAllVariablesForDevice(device.Name);
        devices.RemoveAt(index);
    }

    private async Task ExportJson()
    {
        var json = JsonSerializer.Serialize(devices, new JsonSerializerOptions { WriteIndented = true });
        await JS.InvokeVoidAsync("downloadFile", "config-dl6000.json", "application/json", json);
    }

     private async Task ImportJson(ChangeEventArgs e)
    {
        var file = ((IBrowserFile)e.Value);
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var json = System.Text.Encoding.UTF8.GetString(buffer);
        var importedDevices = JsonSerializer.Deserialize<List<DeviceConfigModel>>(json);

        if (importedDevices != null)
        {
            devices = importedDevices;
        }
    }
}