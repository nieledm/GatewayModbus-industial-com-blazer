@page "/monitor"
@using DL6000WebConfig.Models
@implements IDisposable
@inject DL6000WebConfig.Services.ConfigService ConfigService

@* @inject IHttpClientFactory ClientFactory *@

<h3>Monitoramento em Tempo Real</h3>

@if (variables.Count == 0)
{
    <p>Carregando variáveis...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Dispositivo</th>
                <th>Nome</th>
                <th>Função</th>
                <th>Offset</th>
                <th>Endereço</th>
                <th>Valor Atual</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var variable in variables)
            {
                <tr>
                    <td>@variable.DeviceName</td>
                    <td><input class="form-control" @bind="variable.Name" /></td>
                    <td><input class="form-control" @bind="variable.FunctionCode" /></td>
                    <td><input class="form-control" @bind="variable.Offset" @oninput="e => UpdateAddress(variable)" /></td>
                    <td>@variable.Address</td>
                    <td>@variable.Value</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveVariable(variable)">Remover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="AddVariable">Adicionar Nova Variável</button>
}

<h5>Adicionar Nova Variável</h5>
<div class="row">
    <div class="col-md-3">
        <input class="form-control" placeholder="Nome" @bind="newVar.Name" />
    </div>
    <div class="col-md-2">
        <input class="form-control" placeholder="Função" @bind="newVar.FunctionCode" />
    </div>
    <div class="col-md-2">
        <input class="form-control" placeholder="Offset" type="number" @bind="newVar.Offset" />
    </div>
    <div class="col-md-2">
        <button class="btn btn-success" @onclick="AddVariable">Adicionar</button>
    </div>
</div>

@code {
    private List<ModbusVariable> variables = new();
    private ModbusVariable newVar = new();
    private System.Threading.Timer? timer;
    //private HttpClient? httpClient;
    private HttpClient? client;

    protected override void OnInitialized()
    {
        LoadVariables();

        timer = new Timer(_ =>
        {
            LoadVariables();
            InvokeAsync(StateHasChanged);
        }, null, 0, 3000);
    }

    private async Task LoadVariables()
    {
        variables = ConfigService.GetConfiguredVariables();
    }
    private async Task AddVariable()
    {
        if (string.IsNullOrWhiteSpace(newVar.Name) || newVar.Offset < 0) return;

        newVar.Address = $"4000{newVar.Offset + 1}";
        newVar.Value = MosbusSlaveTcpWrapper.GetValue(newVar.Offset);

        if (client != null)
        {
            await client.PostAsJsonAsync("/api/modbus/variables", newVar);
        }

        newVar = new(); // limpa formulário
        await LoadVariables(); // recarrega a lista da API
    }

    private void RemoveVariable(ModbusVariable variable)
    {
        variables.Remove(variable);
    }

    private void UpdateAddress(ModbusVariable v)
    {
        v.Address = $"40{(v.Offset + 1).ToString("D3")}";
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
