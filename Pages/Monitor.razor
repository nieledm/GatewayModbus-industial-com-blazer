@page "/monitor"
@using DL6000WebConfig.Models
@inject HttpClient Http
@inject DL6000WebConfig.Services.ConfigService ConfigService
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime

<style>
   /* Estilos Gerais */
    .monitor-container {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        padding: 20px;
        margin-bottom: 20px;
    }

    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 8px;
    }

    .status-active {
        background-color: #28a745;
        animation: pulse 1.5s infinite;
    }

    .status-inactive {
        background-color: #dc3545;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }

    /* Tabela Aprimorada */
    .monitor-table {
        font-family: 'Calibri', Arial, sans-serif;
        font-size: 14pt;
        font-weight: normal;
        color: #333333;
    }

    .monitor-table th {
        font-weight: bold;
        font-size: 12pt;
        background-color: #2c3e50;
        color: white;
        padding: 10px 12px;
    }

    .monitor-table td {
        padding: 8px 12px;
        font-size: 12pt;
        border-bottom: 1px solid #e0e0e0;
        vertical-align: middle
    }

    .value-cell {
        font-family: 'Calibri', Arial, sans-serif;
        font-size: 12pt;
        font-weight: bold;
        color: #333333;
    }

    /* Modal Aprimorado */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        width: 90%;
        max-width: 500px;
    }

    /* Formulário de Adição */
    .add-form {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
    }
</style>

<div class="monitor-container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>
            <span class="status-indicator status-active"></span>
            Monitoramento em Tempo Real
        </h3>
        <div class="text-muted small">Atualizado em: @DateTime.Now.ToString("HH:mm:ss")</div>
    </div>

    @if (variables == null || variables.Count == 0)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Carregando...</span>
            </div>
            <p class="mt-2">Carregando variáveis...</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table monitor-table table-hover">
                <thead>
                    <tr>
                        <th>Dispositivo</th>
                        <th>Nome</th>
                        <th>Offset</th>
                        <th>Endereço</th>
                        <th>Valor Atual</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var variable in variables)
                    {
                        <tr>
                            <td>@variable.DeviceName</td>
                            <td>@variable.Name</td>
                            <td>@variable.Offset</td>
                            <td><span class="badge bg-secondary">@variable.Address</span></td>
                            <td class="value-cell">@variable.Value</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" 
                                            @onclick="() => OpenEditModal(variable)"
                                            title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" 
                                            @onclick="async () => await RemoveVariableWithConfirm(variable)"
                                            title="Remover">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal de Edição -->
@if (showEditModal && editVariable != null)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <EditForm Model="editVariable" OnValidSubmit="SaveWithConfirm">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Editar Variável</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Nome da Variável</label>
                        <InputText class="form-control" @bind-Value="editVariable.Name" />
                        <ValidationMessage For="@(() => editVariable.Name)" />
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Offset</label>
                            <InputNumber class="form-control" @bind-Value="editVariable.Offset" />
                            <ValidationMessage For="@(() => editVariable.Offset)" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Dispositivo</label>
                            <InputSelect class="form-control" @bind-Value="editVariable.DeviceName">
                                <option value="">Selecione...</option>
                                @foreach (var d in deviceNames)
                                {
                                    <option value="@d">@d</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editVariable.DeviceName)" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseEditModal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Formulário de Adição -->
<div class="add-form">
    <h5 class="mb-3">Adicionar Nova Variável</h5>
    <EditForm Model="newVar" OnValidSubmit="AddVariable">
        <div class="row g-3">
            <div class="col-md-4">
                <div class="form-floating">
                    <InputText class="form-control" id="newVarName" @bind-Value="newVar.Name" placeholder=" " />
                    <label for="newVarName">Nome</label>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <InputNumber class="form-control" id="newVarOffset" @bind-Value="newVar.Offset" placeholder=" " />
                    <label for="newVarOffset">Offset</label>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <InputSelect class="form-control" id="newVarDevice" @bind-Value="newVar.DeviceName">
                        <option value="">Selecione...</option>
                        @foreach (var d in deviceNames)
                        {
                            <option value="@d">@d</option>
                        }
                    </InputSelect>
                    <label for="newVarDevice">Dispositivo</label>
                </div>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-success w-100">
                    <i class="fas fa-plus"></i> Adicionar
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private bool shouldUpdate = true;
    private List<ModbusVariable> variables = new();
    private ModbusVariable newVar = new();
    private List<string> deviceNames = new();
    private System.Threading.Timer? timer;
    private HttpClient? client;
    private bool isModalOpen = false;
    
    // Variáveis para controle do modal
    private bool showEditModal = false;
    private ModbusVariable? editVariable = null;
    private ModbusVariable? originalVariable = null;
    private CancellationTokenSource? timerCancellationToken;

    private void StartTimer()
    {
        timer = new Timer(async _ => 
        {
            if (shouldUpdate) // Só atualiza quando permitido
            {
                await InvokeAsync(async () =>
                {
                    await LoadVariables();
                    StateHasChanged();
                });
            }
        }, null, 0, 3000);
    }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            client = ClientFactory.CreateClient("api");
            await LoadVariables();

            var devices = ConfigService.GetDevices();
            if (devices != null)
            {
                deviceNames = devices.Select(d => d.Name).ToList();
            }

            StartTimer();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro na inicialização: {ex}");
        }        
    }

    @* private void StartTimer()
    {
        timerCancellationToken = new CancellationTokenSource();
        _ = Task.Run(async () =>
        {
            while (!timerCancellationToken.IsCancellationRequested)
            {
                if (!isModalOpen)
                {
                    await InvokeAsync(async () =>
                    {
                        await LoadVariables();
                        StateHasChanged();
                    });
                }
                await Task.Delay(3000, timerCancellationToken.Token);
            }
        }, timerCancellationToken.Token);
    } *@

    private async Task LoadVariables()
    {
        if (client == null) return;

        try
        {
            var data = await client.GetFromJsonAsync<List<ModbusVariable>>("/api/modbus/variables");
            if (data != null)
            {
                variables = data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar variáveis: {ex}");
        }
    }

    private void OpenEditModal(ModbusVariable variable)
    {
         shouldUpdate = false;
        if (variable == null) return;
        
        isModalOpen = true;
        
        // Faz uma cópia da variável para edição
        originalVariable = new ModbusVariable
        {
            Name = variable.Name,
            Offset = variable.Offset,
            DeviceName = variable.DeviceName,
            Address = variable.Address,
            Value = variable.Value
        };
        
         editVariable = new ModbusVariable
        {
            Name = variable.Name,
            Offset = variable.Offset,
            DeviceName = variable.DeviceName,
            Address = variable.Address,
            Value = variable.Value
        };
        
        showEditModal = true;
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        isModalOpen = false;
        showEditModal = false;
        editVariable = null;
        originalVariable = null;
        StateHasChanged();
        shouldUpdate = true;
    }

    private async Task SaveVariable()
    {
        if (editVariable == null || originalVariable == null) return;

        try
        {
            var payload = new
            {
                original = originalVariable,
                updated = editVariable
            };

            var response = await Http.PutAsJsonAsync("/api/modbus/variables", payload);
            if (response.IsSuccessStatusCode)
            {
                await LoadVariables();
                CloseEditModal();
            }
            else
            {
                Console.WriteLine($"Erro ao salvar: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar variável: {ex}");
        }
    }


    private async Task AddVariable()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newVar.Name) || newVar.Offset < 0 || string.IsNullOrWhiteSpace(newVar.DeviceName))
                return;
            
            newVar.Address = $"40{(newVar.Offset + 1).ToString("D3")}";

            var response = await Http.PostAsJsonAsync("/api/modbus/variables", newVar);
            if (response.IsSuccessStatusCode)
            {
                newVar = new();
                await LoadVariables();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao adicionar variável: {ex}");
        }
    }

    private async Task RemoveVariable(ModbusVariable variable)
    {
        if (variable == null) return;
        
        try {            
            var response = await Http.DeleteAsync($"/api/modbus/variables/{variable.DeviceName}/{variable.Offset}");
            if (response.IsSuccessStatusCode)
            {
                await LoadVariables();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao remover variável: {ex}");
        }
    }

    public void Dispose()
    {
        timerCancellationToken?.Cancel();
        timerCancellationToken?.Dispose();
        client?.Dispose();
        GC.SuppressFinalize(this);
    }

    private async Task RemoveVariableWithConfirm(ModbusVariable variable)
    {
        try 
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Tem certeza que deseja remover a variável {variable.Name}?");
            
            if (confirmed)
            {
                await RemoveVariable(variable);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro na confirmação: {ex.Message}");
        }
    }

    // Método de salvamento com confirmação
    private async Task SaveWithConfirm()
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                "Confirmar alterações nesta variável?");
            
            if (confirmed)
            {
                await SaveVariable();
                CloseEditModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro na confirmação: {ex.Message}");
        }
    }
}