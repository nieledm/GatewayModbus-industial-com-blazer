@* @page "/config" *@
@using System.Text.Json
@inject IJSRuntime JS
@inject ConfigService ConfigService
@inject ModbusVariableService variableService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using DL6000WebConfig.Models
@using DL6000WebConfig.Services
@inject ConfigService ConfigService
@inject ModbusVariableService variableService

<style>
    .config-container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        font-family: 'Calibri', Arial, sans-serif;
    }

    .config-title {
        color: #2c3e50;
        margin-bottom: 25px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.5rem;
    }

    .config-actions {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .equipment-table {
        table-layout: fixed;
        width: 100%;
        border-collapse: collapse;
        background: white;
        font-family: 'Calibri', Arial, sans-serif;
        font-size: 12pt;
        color: #333333;
    }

    .equipment-table th {
        font-weight: 500;
        font-size: 12pt;
        background-color: #2c3e50;
        color: white;
        padding: 10px 12px;
    }

    /* Defina propor√ß√µes para cada coluna */
    .equipment-table th:nth-child(1),
    .equipment-table td:nth-child(1) {
        width: 25%; /* Nome */
    }
    
    .equipment-table th:nth-child(2),
    .equipment-table td:nth-child(2) {
        width: 25%; /* IP */
    }
    
    .equipment-table th:nth-child(3),
    .equipment-table td:nth-child(3) {
        width: 15%; /* Porta */
    }
    
    .equipment-table th:nth-child(4),
    .equipment-table td:nth-child(4) {
        width: 35%; /* A√ß√µes */
        text-align: center;
    }

    .td-actions {
        display: flex;
        justify-content: center;
        gap: 8px;
    }

    .equipment-table td {
        padding: 8px 12px;
        border-bottom: 1px solid #e0e0e0;
        color: #495057;
        vertical-align: middle
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .equipment-table tr:hover {
        background-color: #f8f9fa;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        width: 90%;
        max-width: 600px;
        padding: 20px;
    }

    .modal-header-equipamento {
    background-color: #0d6efd;
    color: white;
    padding: 15px 20px;
    margin: -20px -20px 25px -20px;
    border-radius: 8px 8px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .modal-title-equipamento {
        margin: 0;
        font-size: 1.25rem;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .modal-close-btn {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    opacity: 0.8;
    transition: opacity 0.2s;
    }

    .modal-close-btn:hover {
        opacity: 1;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        min-width: 200px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #495057;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .action-btn {
        min-width: 30px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-io {
        padding: 8px 16px;
        border-radius: 4px;
        background-color: #f8f9fa;
        color: #2c3e50;
        border: 1px solid #dee2e6;
        cursor: pointer;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }

    .btn-io:hover {
        background-color: #e9ecef;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .btn-io:active {
        transform: translateY(0);
        box-shadow: none;
    }

    .btn-io i {
        font-size: 16px;
    }

    .btn-io .emoji {
        display: inline-block;
        width: 20px;
        text-align: center;
    }

    .alert {
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 15px;
    }

    .alert-info {
        background-color: #d1ecf1;
        color: #0c5460;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 1rem;
    }
</style>

<div class="config-container">
    <h3 class="config-title">
        <i class="fas fa-cog"></i>
        <span style="display:inline-block;width:24px;text-align:center;">‚öôÔ∏è</span>
        Configura√ß√£o de Equipamentos DL6000
    </h3>

    <div class="config-actions">
        <button class="btn btn-primary" @onclick="() => AbrirModal(null)">
            <i class="fas fa-plus"></i>
            <span style="display:inline-block;width:20px;text-align:center;">‚ûï</span>
            Adicionar Equipamento
        </button>        
        <div class="d-flex gap-2">
            <button @onclick="ExportJson" class="btn-io">
                <i class="fas fa-upload"></i>
                <span class="emoji">üì§</span>
                Exportar
            </button>
            
            <label class="btn-io">
                <i class="fas fa-download"></i>
                <span class="emoji">üì•</span>
                Importar
                <input type="file" @onchange="ImportJson" hidden />
            </label>
        </div>
    </div>

    @if (devices.Count > 0)
    {
        <div class="table-responsive">
            <table class="equipment-table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>IP</th>
                        <th>Porta</th>
                        <th class="equipment-table td" >A√ß√µes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var (device, index) in devices.Select((d, i) => (d, i)))
                    {
                        <tr>
                            <td>@device.Name</td>
                            <td>@device.Ip</td>
                            <td>@device.Port</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary action-btn" 
                                        @onclick="() => AbrirModal(index)">
                                    <i class="fas fa-edit"></i>
                                    @* <span style="display:inline-block;width:20px;text-align:center;">‚úèÔ∏è</span> *@
                                    Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger action-btn" 
                                        @onclick="() => ExcluirEquipamento(index)">
                                    <i class="fas fa-trash-alt"></i>
                                    @* <span style="display:inline-block;width:20px;text-align:center;">üóëÔ∏è</span> *@
                                    Excluir
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <span style="display:inline-block;width:20px;text-align:center;">‚ÑπÔ∏è</span>
            Nenhum equipamento cadastrado. Clique em "Adicionar Equipamento" para come√ßar.
        </div>
    }

    <!-- Modal de Edi√ß√£o/Adi√ß√£o -->
    @if (mostrarModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <div class="modal-header-equipamento">
                    <h4 class="modal-title-equipamento">
                        <span>@(editandoIndex >= 0 ? "‚úèÔ∏è" : "‚ûï")</span>
                        @(editandoIndex >= 0 ? "Editar Equipamento" : "Adicionar Equipamento")
                    </h4>
                    <button @onclick="FecharModal" class="modal-close-btn">&times;</button>
                </div>
              
                @if (!string.IsNullOrEmpty(mensagemErro))
                {
                    <div class="alert alert-danger">
                        <span style="display:inline-block;width:20px;text-align:center;">‚ö†Ô∏è</span>
                        @mensagemErro
                    </div>
                }
                <div class="form-row">
                    <div class="form-group">
                        <label>Nome</label>
                        <div class="input-group">
                            <span class="input-group-text">DL6000_</span>
                            <input class="form-control" @bind="form.Name" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label>IP</label>
                        <input class="form-control" @bind="form.Ip" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Porta</label>
                        <input class="form-control" @bind="form.Port" />
                    </div>
                    <div class="form-group">
                        <label>Ciclo (ms)</label>
                        <input class="form-control" @bind="form.Cycle" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>Timeout Envio</label>
                        <input class="form-control" @bind="form.TimeoutSend" />
                    </div>
                    <div class="form-group">
                        <label>Timeout Recebimento</label>
                        <input class="form-control" @bind="form.TimeoutReceive" />
                    </div>
                </div>
                <div class="d-flex justify-content-end gap-2">
                    <div class="action-buttons">
                        <button class="btn btn-secondary" @onclick="FecharModal">
                            Cancelar
                        </button>
                        <button class="btn btn-primary" @onclick="SalvarEquipamento">
                            @(editandoIndex >= 0 ? "Salvar Altera√ß√µes" : "Adicionar Equipamento")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string? mensagemErro;
    private DeviceConfigModel form = new();
    private List<DeviceConfigModel> devices = new();
    private bool mostrarModal = false;
    private int editandoIndex = -1;

    protected override void OnInitialized()
    {
        devices = ConfigService.GetDevices();
    }

    private void AbrirModal(int? index)
    {
        if (index.HasValue && index.Value >= 0 && index.Value < devices.Count)
        {
            var device = devices[index.Value];
            form = new DeviceConfigModel
            {
                Name = device.Name.Replace("DL6000_", ""),
                Ip = device.Ip,
                Port = device.Port,
                UnitId1 = device.UnitId1,
                UnitId2 = device.UnitId2,
                StartIndexDL1 = device.StartIndexDL1,
                StartIndexDL2 = device.StartIndexDL2,
                Cycle = device.Cycle,
                TimeoutSend = device.TimeoutSend,
                TimeoutReceive = device.TimeoutReceive
            };
            editandoIndex = index.Value;
        }
        else
        {
            form = new DeviceConfigModel();
            editandoIndex = -1;
        }
        mostrarModal = true;
        mensagemErro = null;
    }

    private void FecharModal()
    {
        mostrarModal = false;
        form = new DeviceConfigModel();
        editandoIndex = -1;
        mensagemErro = null;
    }

    private void SalvarEquipamento()
    {
        try
        {
            // Valida√ß√£o dos campos
            var validation = ValidateEquipment(form);
            if (!validation.isValid)
            {
                mensagemErro = validation.errorMessage;
                return;
            }

            // Convers√£o dos valores para garantir consist√™ncia
            int port = int.Parse(form.Port);
            int timeoutSend = int.Parse(form.TimeoutSend);
            int timeoutReceive = int.Parse(form.TimeoutReceive);
            int cycle = int.Parse(form.Cycle);

            // Verifica√ß√£o de duplicatas
            if (editandoIndex >= 0)
            {
                var antigoNome = devices[editandoIndex].Name;
                if (form.Name != antigoNome && devices.Any(d => d.Name == form.Name))
                {
                    mensagemErro = "J√° existe um equipamento com este nome.";
                    return;
                }
                
                // Atualiza com os valores convertidos
                ConfigService.UpdateDevice(form);
            }
            else
            {
                if (devices.Any(d => d.Name == form.Name))
                {
                    mensagemErro = "J√° existe um equipamento com este nome.";
                    return;
                }
                
                // Adiciona com os valores convertidos
                ConfigService.AddDevice(form);
            }

            devices = ConfigService.GetDevices();
            FecharModal();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao salvar: {ex.Message}";
        }
}

    private (bool isValid, string errorMessage) ValidateEquipment(DeviceConfigModel equipment)
    {
        // Valida√ß√£o do Nome
        if (string.IsNullOrWhiteSpace(equipment.Name))
        {
            return (false, "O nome do equipamento √© obrigat√≥rio.");
        }

        if (!equipment.Name.StartsWith("DL6000_"))
        {
            return (false, "O nome deve come√ßar com 'DL6000_'.");
        }

        var numberPart = equipment.Name.Substring(7);
        if (!int.TryParse(numberPart, out _))
        {
            return (false, "Ap√≥s 'DL6000_' deve conter apenas n√∫meros.");
        }

        // Valida√ß√£o do IP (j√° √© string)
        if (string.IsNullOrWhiteSpace(equipment.Ip))
        {
            return (false, "O endere√ßo IP √© obrigat√≥rio.");
        }

        var ipParts = equipment.Ip.Split('.');
        if (ipParts.Length != 4)
        {
            return (false, "IP inv√°lido. Use o formato: 192.168.1.1");
        }

        foreach (var part in ipParts)
        {
            if (!byte.TryParse(part, out _))
            {
                return (false, $"Parte inv√°lida do IP: '{part}'. Deve ser entre 0 e 255.");
            }
        }

        // Valida√ß√£o da Porta (string para int)
        if (!int.TryParse(equipment.Port, out int port) || port < 1 || port > 65535)
        {
            return (false, "A porta deve ser um n√∫mero entre 1 e 65535.");
        }

        // Valida√ß√£o do TimeoutSend (string para int)
        if (!int.TryParse(equipment.TimeoutSend, out int timeoutSend) || timeoutSend <= 0)
        {
            return (false, "Timeout de envio deve ser um n√∫mero maior que zero.");
        }

        // Valida√ß√£o do TimeoutReceive (string para int)
        if (!int.TryParse(equipment.TimeoutReceive, out int timeoutReceive) || timeoutReceive <= 0)
        {
            return (false, "Timeout de recebimento deve ser um n√∫mero maior que zero.");
        }

        // Valida√ß√£o do Cycle (string para int)
        if (!int.TryParse(equipment.Cycle, out int cycle) || cycle <= 0)
        {
            return (false, "O ciclo deve ser um n√∫mero maior que zero.");
        }

        return (true, null);
}

 
    private void ExcluirEquipamento(int index)
    {
        var device = devices[index];
        ConfigService.DeleteDevice(device.Name);
        variableService.DeleteAllVariablesForDevice(device.Name);
        devices.RemoveAt(index);
    }

    private async Task ExportJson()
    {
        var json = JsonSerializer.Serialize(devices, new JsonSerializerOptions { WriteIndented = true });
        await JS.InvokeVoidAsync("downloadFile", "config-dl6000.json", "application/json", json);
    }

     private async Task ImportJson(ChangeEventArgs e)
    {
        var file = ((IBrowserFile)e.Value);
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var json = System.Text.Encoding.UTF8.GetString(buffer);
        var importedDevices = JsonSerializer.Deserialize<List<DeviceConfigModel>>(json);

        if (importedDevices != null)
        {
            devices = importedDevices;
        }
    }
}